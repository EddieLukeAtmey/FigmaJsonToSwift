import json
import os
import sys
import getpass
import shutil
from datetime import datetime
from pathlib import Path
from figma_to_swift_tokens import camel_case

def generate_protocols(data):
    protocols = []

    # Shared protocols for Bold levels
    protocols.append("""public protocol ABBoldColorProtocol {
    var `default`: UIColor { get }
    var pressed: UIColor { get }
}

public protocol ABChartSeriesBoldColorProtocol {
    var `default`: UIColor { get }
    var selected: UIColor { get }
}""")

    # Background variant protocols
    protocols.append("""public protocol ABBackgroundVariantProtocol {
    var `default`: UIColor { get }
    var pressed: UIColor { get }
    var bold: ABBoldColorProtocol { get }
}

public protocol ABBackgroundBrandProtocol: ABBackgroundVariantProtocol {
    var container: UIColor { get }
    var containerLight: UIColor { get }
}""")

    # Go through categories
    for category, values in data["color"].items():
        if category == "background":
            proto = ["public protocol ABBackgroundColorProtocol {"]
            proto.append("    var disabled: UIColor { get }")
            proto.append("    var `default`: UIColor { get }")
            proto.append("    var view: UIColor { get }")
            proto.append("    var backdrop: UIColor { get }")
            proto.append("    var container: UIColor { get }")
            proto.append("    var overlay: UIColor { get }")
            proto.append("    var brand: ABBackgroundBrandProtocol { get }")
            proto.append("    var danger: ABBackgroundVariantProtocol { get }")
            proto.append("    var warning: ABBackgroundVariantProtocol { get }")
            proto.append("    var success: ABBackgroundVariantProtocol { get }")
            proto.append("    var information: ABBackgroundVariantProtocol { get }")
            proto.append("}")
            protocols.append("\n".join(proto))

        elif category == "chart":
            # Unified chart series protocol
            protocols.append("""public protocol ABChartSeriesColorProtocol {
    var bold: ABChartSeriesBoldColorProtocol { get }
    var bolder: ABChartSeriesBoldColorProtocol { get }
    var boldest: ABChartSeriesBoldColorProtocol { get }
}""")
            proto = ["public protocol ABChartColorProtocol {"]
            for series in values.keys():
                proto.append(f"    var {series}: ABChartSeriesColorProtocol {{ get }}")
            proto.append("}")
            protocols.append("\n".join(proto))

        else:
            # Generic case: flat UIColor properties
            proto_name = f"AB{category.capitalize()}ColorProtocol"
            proto = [f"public protocol {proto_name} {{"]
            for key in values.keys():
                swift_key = camel_case(key)
                if swift_key == 'default':
                    swift_key = '`default`'
                proto.append(f"    var {swift_key}: UIColor {{ get }}")
            proto.append("}")
            protocols.append("\n".join(proto))

    # Theme protocol
    protocols.append("""public protocol ABThemeColorProtocol {
    var text: ABTextColorProtocol { get }
    var icon: ABIconColorProtocol { get }
    var background: ABBackgroundColorProtocol { get }
    var border: ABBorderColorProtocol { get }
    var chart: ABChartColorProtocol { get }
    var shadow: ABShadowColorProtocol { get }
}
""")

    return "\n\n".join(protocols)

def main():
    if len(sys.argv) < 2:
        print(f"Usage: python {sys.argv[0]} <json_file>")
        sys.exit(1)

    json_file = sys.argv[1]

    with open(json_file, "r") as f:
        data = json.load(f)

    # Generate protocols
    protocols_content = f"// Generated by {sys.argv[0]}\n"
    protocols_content += f"// Author: {getpass.getuser()}\n"
    protocols_content += f"// Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    protocols_content += "import UIKit\n\n"
    protocols_content += generate_protocols(data)

    Path("ABColorProtocols.swift").write_text(protocols_content)

    print(f"Generated ABColorProtocols.swift")
    # cleanup __pycache__
    if os.path.exists("__pycache__"):
        shutil.rmtree("__pycache__")

if __name__ == "__main__":
    main()
