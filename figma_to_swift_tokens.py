import json
import os
import sys
import getpass
import shutil
from pathlib import Path
from datetime import datetime

GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
RESET = "\033[0m"

def header():
    return [
        f"// Generated by {sys.argv[0]}",
        f"// Author: {getpass.getuser()}",
        f"// Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "",
        "import UIKit",
        ""
    ]

def camel_case(name: str) -> str:
    if name == "default":
        return "`default`"
    parts = name.replace("-", " ").split()
    return parts[0] + "".join(capitalize_first_letter(word) for word in parts[1:])

def capitalize_first_letter(str: str) -> str:
    return str[0].upper() + str[1:]

def parse_color_ref(value: str) -> str:
    if not value.startswith("{") or not value.endswith("}"):
        return f'UIColor(hex: "{value}")'
    parts = value.strip("{}").split(".")
    if parts[0].lower() == "color":
        parts[0] = "ABColor"
    swift_parts = []
    for i, part in enumerate(parts):
        if i == 0:
            swift_parts.append(part)
        elif part.isdigit() or "%" in part:
            swift_parts.append("p" + part.replace("%", ""))
        else:
            swift_parts.append(capitalize_first_letter(part))
    return ".".join(swift_parts)

def generate_tokens_swift(data: dict) -> str:
    lines = header()
    lines.append("public struct ABThemeColors: ABThemeColorProtocol {")

    def recurse(node: dict, name: str, depth: int = 0, parent: str = None):
        capitalizedName = capitalize_first_letter(name)
        struct_name = capitalizedName
        proto_name = f"AB{capitalizedName}ColorProtocol"
        # Handle background variants
        if parent == "background" and name in ["danger", "warning", "success", "information"]:
            proto_name = "ABBackgroundVariantProtocol"

        elif parent == "background" and name == "brand":
            struct_name = "Brand"
            proto_name = "ABBackgroundBrandProtocol"

        # Handle chart's series bold background variants
        elif name in ["bold", "bolder", "boldest"] and parent.startswith("series"):
            proto_name = "ABChartSeriesBoldColorProtocol"

        # Handle chart series
        elif parent == "chart":
            proto_name = "ABChartSeriesColorProtocol"

        indent = "    " * depth
        print(f"{indent}Generating {name}: {GREEN}struct {struct_name}: {proto_name}{RESET}")
        lines.append(f"\n{indent}public let {name}: {proto_name} = {struct_name}() ")
        lines.append(f"{indent}public struct {struct_name}: {proto_name} {{")
        for key, val in node.items():
            swift_key = camel_case(key)

            if isinstance(val, dict) and "$value" in val:
                swift_value = parse_color_ref(val["$value"])
                lines.append(f"{indent}    public var {swift_key}: UIColor {{ {swift_value} }}")
            elif isinstance(val, dict):
                recurse(val, key, depth + 1, parent=name)
                # if parent == "background" and name in ["danger", "warning", "success", "information"]:
                #     lines.append(f"{indent}    public var {swift_key}: UIColor {{ UIColor.clear }} // adjust mapping")
                # else:
                #     nested_struct = f"AB{key.capitalize()}Color"
                #     nested_proto = f"AB{key.capitalize()}ColorProtocol"
                #     lines.append(f"{indent}    public let {swift_key} = {nested_struct}() ")

        lines.append(f"{indent}}}")

    # top-level categories under "color"
    for key, val in data["color"].items():
        print(f"Generating {GREEN}{key}{RESET}:")
        recurse(val, key, 1)
        capitalizedKey = capitalize_first_letter(key)
        struct_name = f"AB{capitalizedKey}Color"
        proto_name = f"AB{capitalizedKey}ColorProtocol"
        if key == "background":
            proto_name = "ABBackgroundColorProtocol"
            struct_name = "ABBackgroundColor"
        elif key == "chart":
            proto_name = "ABChartColorProtocol"
            struct_name = "ABChartColor"
        # lines.append(f"    public var {camel_case(key)}: {proto_name} {{ {struct_name}() }}")
        # lines.append("}")

    lines.append("}")
    return "\n".join(lines)

def main():
    if len(sys.argv) < 2:
        print("Usage: python figma_to_swift_tokens.py <json_file>")
        sys.exit(1)

    json_file = sys.argv[1]

    with open(json_file, "r") as f:
        data = json.load(f)

    Path("ABColorTokens.swift").write_text(generate_tokens_swift(data))

    # cleanup __pycache__
    if os.path.exists("__pycache__"):
        shutil.rmtree("__pycache__")

if __name__ == "__main__":
    main()
