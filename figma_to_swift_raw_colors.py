import json
import sys
import getpass
import shutil
from datetime import datetime
from pathlib import Path
import re

def camel_case(s: str) -> str:

    # convert hyphen to camelCase
    parts = s.split("-")
    if len(parts) > 1:
        s = parts[0] + "".join(p.capitalize() for p in parts[1:])

    # Convert keys like '100%' or 'surfaceInverse' to valid Swift names.
    s = s.replace("%", "")
    if s and s[0].isdigit():
        s = "p" + s
    return s

def header() -> list[str]:
    username = getpass.getuser()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    return [
        f"// Generated by {sys.argv[0]}",
        f"// Author: {username}",
        f"// Date: {timestamp}",
        "",
        "import UIKit\n"
    ]

def generate_colors_swift(data: dict) -> str:
    lines = header()
    lines.append("struct ABColor {")

    def recurse(node: dict, name: str, depth: int):
        indent = "    " * depth
        lines.append(f"{indent}struct {camel_case(name).capitalize()} {{")
        for key, val in node.items():
            if isinstance(val, dict) and "$value" in val:
                hex_value = val["$value"].lstrip("#")
                prop = camel_case(key)

                if len(hex_value) == 6:  # RRGGBB
                    color = f"UIColor(rgb: 0x{hex_value})"
                elif len(hex_value) == 8:  # RRGGBBAA
                    color = f"UIColor(rgba: 0x{hex_value})"
                else:
                    color = f'UIColor(hex: "{val["$value"]}")'

                lines.append(f"{indent}    static let {prop} = {color}")
            elif isinstance(val, dict):
                recurse(val, key, depth + 1)
            else:
                print(f"⚠️ Skipped key {key} with value {val}")
        lines.append(f"{indent}}}")

    # top-level groups under "Color"
    for group, shades in data["Color"].items():
        recurse(shades, group, 1)

    lines.append("}")
    lines.append("""
private extension UIColor {
    convenience init(rgb: Int) {
        self.init(
            red: CGFloat((rgb >> 16) & 0xFF) / 255.0,
            green: CGFloat((rgb >> 8) & 0xFF) / 255.0,
            blue: CGFloat(rgb & 0xFF) / 255.0,
            alpha: 1.0
        )
    }

    convenience init(rgba: Int) {
        self.init(
            red: CGFloat((rgba >> 24) & 0xFF) / 255.0,
            green: CGFloat((rgba >> 16) & 0xFF) / 255.0,
            blue: CGFloat((rgba >> 8) & 0xFF) / 255.0,
            alpha: CGFloat(rgba & 0xFF) / 255.0
        )
    }
}
""")
    return "\n".join(lines)

def main(colors_file: str):
    with open(colors_file) as f:
        colors_data = json.load(f)

    Path("ABColors.swift").write_text(generate_colors_swift(colors_data))
    print(f"Generated ABColors.swift")
    # cleanup __pycache__
    if os.path.exists("__pycache__"):
        shutil.rmtree("__pycache__")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 generate_swift.py colors.json")
    else:
        main(sys.argv[1])
